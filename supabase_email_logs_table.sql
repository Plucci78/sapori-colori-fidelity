-- ===================================
-- SCRIPT SQL - CREAZIONE TABELLA EMAIL_LOGS
-- Per risolvere l'errore 404: email_logs non trovata
-- ===================================

-- Crea tabella email_logs per tracciare le email inviate
CREATE TABLE IF NOT EXISTS public.email_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email_type VARCHAR(50) NOT NULL,           -- Tipo: 'welcome', 'milestone', 'campaign', etc.
  recipients_count INTEGER NOT NULL DEFAULT 0, -- Numero destinatari
  subject TEXT NOT NULL,                      -- Oggetto email
  status VARCHAR(20) NOT NULL DEFAULT 'sent', -- Status: 'sent', 'failed', 'pending'
  sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), -- Data/ora invio
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Aggiungi commenti alle colonne
COMMENT ON TABLE public.email_logs IS 'Log delle email inviate dal sistema di loyalty';
COMMENT ON COLUMN public.email_logs.email_type IS 'Tipo di email: welcome, milestone, campaign, etc.';
COMMENT ON COLUMN public.email_logs.recipients_count IS 'Numero di destinatari per questa email';
COMMENT ON COLUMN public.email_logs.subject IS 'Oggetto dell''email inviata';
COMMENT ON COLUMN public.email_logs.status IS 'Stato invio: sent, failed, pending';
COMMENT ON COLUMN public.email_logs.sent_at IS 'Data e ora di invio email';

-- Crea indici per performance
CREATE INDEX IF NOT EXISTS idx_email_logs_sent_at ON public.email_logs(sent_at DESC);
CREATE INDEX IF NOT EXISTS idx_email_logs_type ON public.email_logs(email_type);
CREATE INDEX IF NOT EXISTS idx_email_logs_status ON public.email_logs(status);

-- Crea trigger per aggiornare updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_email_logs_updated_at 
    BEFORE UPDATE ON public.email_logs 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Abilita Row Level Security (RLS)
ALTER TABLE public.email_logs ENABLE ROW LEVEL SECURITY;

-- Policy per permettere lettura/scrittura agli utenti autenticati
CREATE POLICY "Users can view email logs" ON public.email_logs
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can insert email logs" ON public.email_logs
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Inserisci alcuni dati di esempio (opzionale)
INSERT INTO public.email_logs (email_type, recipients_count, subject, status) VALUES
('welcome', 1, 'Benvenuto in Sapori & Colori!', 'sent'),
('milestone', 1, 'Hai raggiunto 100 GEMME!', 'sent'),
('campaign', 15, 'Offerta Speciale del Weekend', 'sent');

-- Mostra conferma
SELECT 'Tabella email_logs creata con successo!' as status;
